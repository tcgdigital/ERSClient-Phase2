 @mixin bg-nr($relativeUrl) {
     background: url($images-root + $relativeUrl) no-repeat 0 0;
 }

 @mixin bg($relativeUrl) {
     background: url($images-root + $relativeUrl);
 }

 @mixin bg-image($relativeUrl) {
     background-image: url($images-root + $relativeUrl);
 }

 @mixin placeholderStyle($color, $opacity) {
     &::-webkit-input-placeholder {
         color: $color;
         opacity: $opacity;
     }
     &:-moz-placeholder {
         /* Firefox 18- */
         color: $color;
         opacity: $opacity;
     }
     &::-moz-placeholder {
         /* Firefox 19+ */
         color: $color;
         opacity: $opacity;
     }
     &:-ms-input-placeholder {
         color: $color;
         opacity: $opacity;
     }
 }

 @mixin background-size($width, $height) {
     -webkit-background-size: $width $height;
     -moz-background-size: $width $height;
     -o-background-size: $width $height;
     background-size: $width $height;
 }

 @mixin rounded($radius: 0.5em) {
     -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
     border-radius: $radius;
 }

 @mixin box-shadow($top, $left, $blur, $spread, $color, $inset: false) {
     @if $inset {
         -webkit-box-shadow: inset $top $left $blur $spread $color;
         -moz-box-shadow: inset $top $left $blur $spread $color;
         box-shadow: inset $top $left $blur $spread $color;
     }
     @else {
         -webkit-box-shadow: $top $left $blur $spread $color;
         -moz-box-shadow: $top $left $blur $spread $color;
         box-shadow: $top $left $blur $spread $color;
     }
 }

 @function convert-angle($value, $unit) {
     $convertable-units: deg grad turn rad;
     $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
     @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
         @return $value / nth($conversion-factors, index($convertable-units, unit($value))) * nth($conversion-factors, index($convertable-units, $unit));
     }
     @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
 }

 @function is-direction($value) {
     $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
     $is-angle: type-of($value)=='number' and index('deg' 'grad' 'turn' 'rad', unit($value));
     @return $is-direction or $is-angle;
 }

 @function legacy-direction($value) {
     @if is-direction($value)==false {
         @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
     }
     $conversion-map: ( to top: bottom, to top right: bottom left, to right top: left bottom, to right: left, to bottom right: top left, to right bottom: left top, to bottom: top, to bottom left: top right, to left bottom: right top, to left: right, to left top: right bottom, to top left: bottom right);
     @if map-has-key($conversion-map, $value) {
         @return map-get($conversion-map, $value);
     }
     @return 90deg - convert-angle($value, 'deg');
 }

 @mixin linear-gradient-bg($direction, $color-stops...) {
     @if is-direction($direction)==false {
         $color-stops: ($direction, $color-stops);
         $direction: 180deg;
     }
     background: nth(nth($color-stops, 1), 1);
     background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
     background: -o-linear-gradient(legacy-direction($direction), $color-stops);
     background: -moz-linear-gradient(legacy-direction($direction), $color-stops);
     background: linear-gradient($direction, $color-stops);
 }

 @mixin linear-gradient-border($direction, $color-stops...) {
     @if is-direction($direction)==false {
         $color-stops: ($direction, $color-stops);
         $direction: 180deg;
     }
     border-image: nth(nth($color-stops, 1), 1);
     border-image: -webkit-linear-gradient(legacy-direction($direction), $color-stops) 1;
     border-image: -o-linear-gradient(legacy-direction($direction), $color-stops) 1;
     border-image: -moz-linear-gradient(legacy-direction($direction), $color-stops) 1;
     border-image: linear-gradient($direction, $color-stops) 1;
 }

 @mixin translate3d($tx, $ty, $tz) {
     -webkit-transform: translate3d($tx, $ty, $tz);
     -moz-transform: translate3d($tx, $ty, $tz);
     -ms-transform: translate3d($tx, $ty, $tz);
     -o-transform: translate3d($tx, $ty, $tz);
     transform: translate3d($tx, $ty, $tz);
 }

 @mixin perspective($length) {
     -webkit-perspective: $length;
     -moz-perspective: $length;
     perspective: $length;
 }

 @mixin perspective-origin($x, $y) {
     -webkit-perspective-origin: $x $y;
     -moz-perspective-origin: $x $y;
     perspective-origin: $x $y;
 }

 @mixin transition($prop, $delay) {
     -webkit-transition: $prop $delay;
     -moz-transition: $prop $delay;
     transition: $prop $delay;
 }

 @mixin transform($prop-stops...) {
     -webkit-transform: $prop-stops;
     -moz-transform: $prop-stops;
     -ms-transform: $prop-stops;
     -o-transform: $prop-stops;
     transform: $prop-stops;
 }

 @mixin box-shadow-multi($prop-stops...) {
     -webkit-box-shadow: $prop-stops;
     -moz-box-shadow: $prop-stops;
     box-shadow: $prop-stops;
 }

 @mixin flex($grow, $shrink, $basis) {
     -webkit-flex: $grow $shrink $basis;
     -ms-flex: $grow $shrink $basis;
     flex: $grow $shrink $basis;
 }

 @mixin animation($type, $duration) {
     -webkit-animation: $type $duration;
     -moz-animation: $type $duration;
     animation: $type $duration;
 }

 @mixin translateY($y) {
     -webkit-transform: translateY($y);
     -moz-transform: translateY($y);
     -ms-transform: translateY($y);
     -o-transform: translateY($y);
     transform: translateY($y);
 }

 @mixin translateY-rotate($y, $rotate) {
     -webkit-transform: translateY($y) rotate($rotate);
     -moz-transform: translateY($y) rotate($rotate);
     -ms-transform: translateY($y) rotate($rotate);
     -o-transform: translateY($y) rotate($rotate);
     transform: translateY($y) rotate($rotate);
 }

 @mixin backface-visibility($prop) {
     -webkit-backface-visibility: $prop;
     backface-visibility: $prop;
 }